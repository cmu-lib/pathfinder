% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greedy_search.R
\name{greedy_search_handler}
\alias{greedy_search_handler}
\title{Pathfinding handler}
\usage{
greedy_search_handler(pathfinder_graph, starting_point, search_set, qe, qv,
  qb, is_bundle_crossing, penalize, penalty_fun = penalize_square, quiet)
}
\description{
Primary recursive function that steps through the graph. This function has two
modes depending on the value of is_bundle_crossing:
}
\details{
\itemize{
\item If TRUE, the function tries to cross the the farthest node THAT BELONGS TO
THE SAME bundle, almost always ensuring that it successfully crosses the
bundle.
\item If FALSE, the function looks for the next nearest point that is the entry
point for a bundle, and takes that path.
}

Regardless of which mode the function is using, it saves both the node & edge
paths to the queues, and then checks which bundles have been crossed by the
path it just took. For those bundles, it 1) increases ALL the bundle edge
weights (not just the weights of the bundles crossed) by squaring them, making
them exponentially less-attractive for future crossings; and 2) removes any of
the associated nodes for that bundle from the remaining set of nodes to be
visited.

After this, it passes the newly reweighted graph and the new starting point to
itself, and flips its mode. It will recurse until search_set is empty, or
until it can find no further paths to take.
}
